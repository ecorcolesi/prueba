# El nombre del fichero push.yml pude ser otro
# cuando hagamos un push en github se va realizar este job
on: push
name: deploy
jobs:
  deploy:
    name: deploy to cluster kubernetes
    # el droplet, maquina virtual donde va a correr esto, hemos elegido la ultima version de ubuntu
    runs-on: ubuntu-latest
    steps: # cada name es un paso/accion
      # Primera accion, hace un checkout de la rama master
      - name: checkout del master
        # actions(repositorio donde estan las acciones de github)
        uses: actions/checkout@master

      # Segundo paso, hacer un build y un push con la version 1
      - name: build and push to docker
        # docker(repositorio donde estan las acciones de docker)
        uses: docker/build-push-action@v1
        # lo usamos pasar variables
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
          # repository: ${{ github.repositiry }} coje el nombre del repository(ecorcolesi/prueba)
          
          repository: everecidocker/prueba
          # cuando construye la imagen la tagea con la ref y con el sha de docker
          tag_with_ref: true
          tag_with_sha: true
          # cuando construye la imagen la tagea con el sha de git que es mas larga
          tags: ${{github.sha}}
#-------- hasta aqui lo que hemos hecho generado una imgen docker y la hemos subido a DockerHub
      # Le añadimos otro paso para hacer el deploy en el cluster de kubernetes
      # https://github.com/marketplace/actions/kubernetes-cli-kubectl  
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          # establecemos el contenido en base64 del archivo que permite a kubectl conectar con el cluster(~/.kube/config)
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          # Establecemos argumentos al kubectl
          # deployment/my-app(nombre del deployment que va a estar en el cluster de kubernetes)(tiene que estar creado si no esto fallará)
          # hay que fijarse en el deployment.yaml que he hecho
          args: set image --record deployment/my-app my-app=everecidocker/prueba:${{ github.sha }}
         
        # Le añadimos otro paso para hacer para verificar que el deployment esta corriendo con un rollout
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: '"rollout status deployment/my-app"'
# una vez instalado todo
# entro el pod, previamente he hecho un kubectl get pods, he instalo curl
# kubectl exec -it my-app-66b8679588-jnhrt apk add curl
# hago un cuirl a localhost para ver que esta corriendo
# kubectl exec -it my-app-67bf85fff-jzjfq curl localhost(deprecated)
# kubectl exec -it my-app-67bf85fff-jzjfq -- curl localhost